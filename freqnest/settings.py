"""
Django settings for freqnest project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
import django_heroku
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Secret key configuration
SECRET_KEY = config('DJANGO_SECRET_KEY')

# Stripe public key configuration
STRIPE_PUBLIC_KEY = config('STRIPE_PUBLIC_KEY')

# Debug mode configuration (Change to False in production)
DEBUG = False

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',  
            'class': 'logging.FileHandler',
            'filename': 'error.log',  
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',  
            'propagate': True,
        },
    },
}

# Allowed hosts in production
ALLOWED_HOSTS = ['freqnest-4ae6f0930605.herokuapp.com', 'www.freqnest-4ae6f0930605.herokuapp.com']



# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    'django.contrib.staticfiles',
    'shop',
    'synths',
    'cart',
    'checkout',
    'stripe',
    'profiles',
    'storages',
]

MIDDLEWARE = [
    # Security middlewares
    "django.middleware.security.SecurityMiddleware",
    
    # Middleware for serving static files in production
    "whitenoise.middleware.WhiteNoiseMiddleware",
    
    # Middleware for handling sessions
    "django.contrib.sessions.middleware.SessionMiddleware",
    
    # Middleware for common functionality
    "django.middleware.common.CommonMiddleware",
    
    # Middleware for CSRF protection
    "django.middleware.csrf.CsrfViewMiddleware",
    
    # Middleware for authentication
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    
    # Middleware for handling messages
    "django.contrib.messages.middleware.MessageMiddleware",
    
    # Middleware for preventing clickjacking
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


ROOT_URLCONF = "freqnest.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],  
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "cart.contexts.cart_contents",
            ],
        },
    },
]

WSGI_APPLICATION = "freqnest.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(default=config('DATABASE_URL'), conn_max_age=600, ssl_require=True)
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

USE_AWS = config('USE_AWS', default=False, cast=bool)    # Bucket Config
if USE_AWS:
    # AWS settings
    AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME')
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

    STATICFILES_STORAGE = 'custom_storages.StaticStorage'
    STATICFILES_LOCATION = 'static'
    DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'
    MEDIAFILES_LOCATION = 'media'

    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'
    
else:
    # Local static/media settings
    STATIC_URL = '/static/'
    MEDIA_URL = '/media/'

# Redirect URL after login
LOGIN_REDIRECT_URL = 'profile'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

django_heroku.settings(locals())